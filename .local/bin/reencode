#!/usr/bin/env bash
#
# Reencode videos for direct play on Chromecast.

__help() {
    echo "Usage: $0 <videofile1> [ videofile2 ... ]"
}

__success() {
    echo "SUCCESS: $1"
}

__fail() {
    echo "FAIL: $1"
}

__reencode() {
    local orig=$1
    local base=$(basename "$orig")
    local out=$OUT_DIR/reencoded.${base%.*}.mp4
    local log=$LOG_DIR/${base}.log
    local err=$LOG_DIR/${base}.err
    local streams=$LOG_DIR/${base}.streams

    ffprobe -show_streams -print_format flat "$orig" 2>/dev/null >"$streams"
    
    echo "Reencoding $orig to $out"

    echo ffmpeg -i "$orig" \
        -c:v libx264 \
            -preset ultrafast \
            -profile:v high \
            -level 4.1 \
            -crf 23 \
            -tune film \
            -maxrate 2000k \
            -bufsize 2000k \
            -pix_fmt yuv420p \
            -force_key_frames "expr:gte(t,n_forced*5)" \
            -x264opts bframes=3:cabac=1 \
            -movflags +faststart \
        -c:a aac \
            -strict -2 \
            -b:a 128k \
            -ac 2 \
        -xerror \
        -y "$out"

    ffmpeg -i "$orig" \
        -c:v libx264 \
            -preset ultrafast \
            -profile:v high \
            -level 4.1 \
            -crf 23 \
            -tune film \
            -maxrate 2000k \
            -bufsize 2000k \
            -pix_fmt yuv420p \
            -force_key_frames "expr:gte(t,n_forced*5)" \
            -x264opts bframes=3:cabac=1 \
            -movflags +faststart \
        -c:a aac \
            -strict -2 \
            -b:a 128k \
            -ac 2 \
        -xerror \
        -y "$out" </dev/null \
        > "$log" \
        2> "$err" \
    && __success $orig \
    || __fail $orig
}

if [ $# -lt 1 ]; then
    __help
    exit 1
fi
 
OUT_DIR="$(pwd)"

LOG_DIR="$OUT_DIR/.reencode_logs"
mkdir -p "$LOG_DIR"

for FILE in "$@"; do
    if [ -f "$FILE" ]; then
        __reencode "$FILE"
    elif [ -d "$FILE" ]; then
        find "$FILE" -type f -print0 | while read -d $'\0' CHILD; do
            __reencode "$CHILD"
        done
    else
        echo "Skipping invalid file ($FILE)."
    fi
done
