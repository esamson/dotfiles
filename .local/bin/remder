#!/usr/bin/env amm -s

/**
 * Render markdown files.
 *
 * Environment variables:
 *
 * REMDER_OUTDIR - output directory, /tmp if unset
 * REMDIR_CSS - CSS file, embedded DefaultCss if unset
 *
 * requires http://www.lihaoyi.com/Ammonite/
 */

import $ivy.`com.atlassian.commonmark:commonmark:0.7.0`
import $ivy.`com.lihaoyi::scalatags:0.6.0`
import $ivy.`net.sourceforge.plantuml:plantuml:8048`

import java.io._
import java.util
import javax.xml.bind.DatatypeConverter

import ammonite.ops._
import net.sourceforge.plantuml.SourceStringReader
import org.commonmark.node._
import org.commonmark.parser.Parser
import org.commonmark.renderer.NodeRenderer
import org.commonmark.renderer.html._

import scala.concurrent._
import scala.concurrent.duration.Duration
import scalatags.Text.all._

val outdir = sys.env.get("REMDER_OUTDIR").
  map(f => Path(new File(f).getAbsoluteFile)).
  getOrElse(root / 'tmp)
val css = sys.env.get("REMDER_CSS").
  map(f => Path(new File(f).getAbsoluteFile))

@main
def main(file: File): Unit = {
  val source = read ! Path(file.getAbsoluteFile)
  val hash = source.hashCode

  val title = file.getName.stripSuffix(".md")
  val target = outdir / s"remder-$hash.html"

  if (!target.toIO.exists) {
    write(target, render(title, source))
  }

  %%('open, target.last)(outdir)
}

def render(title: String, source: String) = {
  val parser = Parser.builder().build()
  val document = parser.parse(source)
  val renderer = HtmlRenderer.builder().
    nodeRendererFactory(new FencedCodeBlockRenderer(document)).
    build()
  val output = renderer.render(document)

  html(
    head(
      tag("title")(
        title
      ),
      tag("style")(
        raw(css.map(read ! _).getOrElse(DefaultCss))
      )
    ),
    body(
      h1(title),
      raw(output)
    )
  ).render
}

class FencedCodeBlockRenderer(document: Node) extends HtmlNodeRendererFactory {

  val renderedUml = renderUmlNodes(document)

  def renderUmlNodes(document: Node) = {
    val builder = Map.newBuilder[String, Future[String]]

    document.accept(new AbstractVisitor {
      override def visit(fcb: FencedCodeBlock): Unit = {
        import ExecutionContext.Implicits.global

        if (fcb.getInfo == "uml") {
          val source = fcb.getLiteral
          val hash = source.hashCode.toString
          fcb.setLiteral(hash)

          builder += hash -> Future {
            val targetPath = outdir / s"$hash.png"
            val targetFile = targetPath.toIO

            blocking {
              if (!targetFile.exists) {
                new SourceStringReader(s"@startuml\n$source\n@enduml").
                  generateImage(targetFile)
              }

              DatatypeConverter.printBase64Binary(targetPath.getBytes)
            }
          }
        }
      }
    })

    builder.result()
  }

  override def create(context: HtmlNodeRendererContext): NodeRenderer = {
    val writer = context.getWriter
    val default = new CoreHtmlNodeRenderer(context)

    new NodeRenderer {
      override def getNodeTypes = {
        util.Collections.singleton(classOf[FencedCodeBlock])
      }

      override def render(node: Node): Unit = {
        node match {
          case fcb: FencedCodeBlock if "uml" == fcb.getInfo =>
            val hash = fcb.getLiteral
            val rendered = Await.result(renderedUml(hash), Duration.Inf)
            val dataUri = s"data:image/png;base64,$rendered"
            val attrs = new util.HashMap[String, String]()
            attrs.put("src", dataUri)

            writer.line()
            writer.tag("img", attrs, true)
            writer.line()
          case _ => default.render(node)
        }
      }
    }
  }
}

val DefaultCss = """
*{margin:0;padding:0;}
body {
	font:13.34px helvetica,arial,freesans,clean,sans-serif;
	color:black;
	line-height:1.4em;
	padding: 0.7em;
}
p {
	margin:1em 0;
	line-height:1.5em;
}
table {
	font-size:inherit;
	font:100%;
	margin:1em;
}
table th{border-bottom:1px solid #bbb;padding:.2em 1em;}
table td{border-bottom:1px solid #ddd;padding:.2em 1em;}
input[type=text],input[type=password],input[type=image],textarea{font:99% helvetica,arial,freesans,sans-serif;}
select,option{padding:0 .25em;}
optgroup{margin-top:.5em;}
pre,code{font:12px Monaco,"Courier New","DejaVu Sans Mono","Bitstream Vera Sans Mono",monospace;}
pre {
	margin:1em 0;
	font-size:12px;
	border:1px solid #ddd;
	padding:5px;
	line-height:1.5em;
	color:#444;
	overflow:auto;
	-webkit-box-shadow:rgba(0,0,0,0.07) 0 1px 2px inset;
	-webkit-border-radius:3px;
	-moz-border-radius:3px;border-radius:3px;
}
pre code {
	padding: 0.5em;
	font-size:12px;
	border:none;
    display: block;
    color: #333;
}
code {
	font-size:12px;
	color:#444;
	padding:0 .2em;
	border:1px solid #dedede;
}
img{border:0;max-width:100%;}
abbr{border-bottom:none;}
a{color:#4183c4;text-decoration:none;}
a:hover{text-decoration:underline;}
a code,a:link code,a:visited code{color:#4183c4;}
h2,h3{margin:1em 0;}
h1,h2,h3,h4,h5,h6{border:0;}
h1{font-size:170%;border-top:4px solid #aaa;padding-top:.5em;margin-top:1.5em;}
h1:first-child{margin-top:0;padding-top:.25em;border-top:none;}
h2{font-size:150%;margin-top:1.5em;border-bottom:1px solid #ddd;padding-bottom:.5em;}
h3{margin-top:1em;}
hr{height:0;margin:15px 0;overflow:hidden;background:transparent;border:0;border-bottom:4px solid #ddd;}
ul{margin:1em 0 1em 2em;}
ol{margin:1em 0 1em 2em;}
ul li,ol li{margin-top:.5em;margin-bottom:.5em;}
ul ul,ul ol,ol ol,ol ul{margin-top:0;margin-bottom:0;}
blockquote{margin:1em 0;border-left:5px solid #ddd;padding-left:.6em;color:#555;}
dt{font-weight:bold;margin-left:1em;}
dd{margin-left:2em;margin-bottom:1em;}
@media screen and (min-width: 768px) {
    body {
        width: 748px;
        margin:10px auto;
    }
}
"""
